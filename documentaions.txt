pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org requests
pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --upgrade pip
pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --upgrade pip
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pymongo
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org python-dotenv
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org faker
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pytest
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org mongomock
pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org flask



mongodb+srv://nouhakarim:<password>@cluster0.obpf5yj.mongodb.net/

generate_neighbors
        """
        Generate a set of neighboring schedules by altering the given schedule.

        Neighbors are generated by:
        - Swapping two surgeries in the schedule.
        - Shifting surgery start times.
        - Changing operating rooms.

        Args:
        surgeries (list): The current schedule, represented as a list of Surgery objects.
        room_assignments (list): Current room assignments as a list of SurgeryRoomAssignment objects.

        Returns:
        list: A list of neighboring schedules.
        """

def initialize_surgeries():
    patient_ids = fetch_ids(collection_name="patients", id_field="patient_id")
    surgeon_ids = fetch_ids(collection_name="surgeons", id_field="surgeon_id")
    room_ids = fetch_ids(collection_name="operating_rooms", id_field="room_id")
    # Continue with the surgeries initialization using these fetched IDs


def fetch_ids(collection_name, id_field):
    # Assume db is a global MongoDB client instance accessible here
    collection = db[collection_name]
    documents = collection.find({}, {id_field: 1})
    ids = [doc[id_field] for doc in documents]
    return ids



